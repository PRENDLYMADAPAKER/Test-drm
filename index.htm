<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NZM IPTV</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@600&display=swap" rel="stylesheet">
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
  <script src="https://cdn.jsdelivr.net/npm/shaka-player@4.3.5/dist/shaka-player.compiled.min.js"></script>
  <style>
    * { box-sizing: border-box; font-family: 'Orbitron', sans-serif; }
    body, html { margin: 0; padding: 0; height: 100%; background: black; color: white; }
    #loginSection {
      display: flex; justify-content: center; align-items: center;
      height: 100vh; background: url('https://i.imgur.com/yeftKeD.jpeg') no-repeat center center fixed;
      background-size: cover;
    }
    .login-box {
      background: rgba(0,0,0,0.6); padding: 30px 40px; border-radius: 12px;
      backdrop-filter: blur(8px); text-align: center;
    }
    .login-box input {
      display: block; width: 250px; margin: 10px auto;
      padding: 10px; border-radius: 6px; border: none;
    }
    .login-box button {
      background: hotpink; border: none; color: white; font-weight: bold;
      padding: 10px 25px; border-radius: 6px; cursor: pointer;
    }
    #iptvSection {
      display: none; min-height: 100vh;
      background: url('https://i.imgur.com/yeftKeD.jpeg') no-repeat center center fixed;
      background-size: cover; padding: 10px;
    }
    .header {
      display: flex; align-items: center; justify-content: space-between;
      margin-bottom: 10px;
    }
    .logout-btn {
      background: crimson; padding: 8px 16px;
      border-radius: 6px; cursor: pointer;
    }
    video {
      width: 100%; border-radius: 10px; background: black;
    }
    #nowChannel {
      text-align: center; font-weight: bold; margin: 10px 0;
    }
    #search {
      width: 100%; padding: 10px; border-radius: 8px; margin: 10px 0;
      font-size: 16px;
    }
    .carousel, #channelList {
      display: flex; overflow-x: auto; gap: 8px;
      padding: 10px 0; scroll-behavior: smooth;
    }
    .carousel button {
      background: #222; color: white; border: none;
      padding: 6px 12px; border-radius: 20px; white-space: nowrap;
    }
    .carousel button.active {
      background: hotpink;
    }
    .channel {
      flex: 0 0 48%;
      background: rgba(255,255,255,0.1);
      border-radius: 10px; text-align: center; padding: 10px;
    }
    .channel img {
      width: 100%; max-height: 100px; object-fit: contain;
    }
    #reconnecting {
      text-align: center; color: red; display: none; margin: 5px 0;
    }
    .scrollBtn {
      position: absolute; top: 50%; transform: translateY(-50%);
      background: rgba(0,0,0,0.5); color: white; border: none;
      font-size: 20px; padding: 10px; z-index: 10;
      border-radius: 8px; cursor: pointer;
    }
    #catLeft, #chanLeft { left: 0; }
    #catRight, #chanRight { right: 0; }
  </style>
</head>
<body>

<div id="loginSection">
  <div class="login-box">
    <h2>NZM IPTV Login</h2>
    <input type="text" id="email" placeholder="Username">
    <input type="password" id="password" placeholder="Password">
    <button id="loginBtn">Login</button>
    <p id="loginError" style="color:red;"></p>
  </div>
</div>

<div id="iptvSection">
  <div class="header">
    <img src="logo.png" alt="Logo" style="width:60px;height:60px;border-radius:50%;">
    <div class="logout-btn" onclick="logout()">Logout</div>
  </div>
  <video id="player" controls autoplay></video>
  <div id="reconnecting">Reconnecting stream...</div>
  <div id="nowChannel">Now Playing</div>
  <input type="text" id="search" placeholder="Search channels...">
  <div style="position:relative">
    <button id="catLeft" class="scrollBtn" onclick="scrollCategory(-1)">⏪</button>
    <div id="categoryList" class="carousel"></div>
    <button id="catRight" class="scrollBtn" onclick="scrollCategory(1)">⏩</button>
  </div>
  <div style="position:relative">
    <button id="chanLeft" class="scrollBtn" onclick="scrollChannel(-1)">⏪</button>
    <div id="channelList"></div>
    <button id="chanRight" class="scrollBtn" onclick="scrollChannel(1)">⏩</button>
  </div>
</div>

  <script>
const firebaseConfig = {
  apiKey: "AIzaSyDssixgarRWvLMKtUsX7HLEt8uPGmNIRak",
  authDomain: "iptv-login-3204b.firebaseapp.com",
  databaseURL: "https://iptv-login-3204b-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "iptv-login-3204b",
  storageBucket: "iptv-login-3204b.appspot.com",
  messagingSenderId: "464216999882",
  appId: "1:464216999882:web:d7e1f7d44adacd8b46b133"
};
firebase.initializeApp(firebaseConfig);
const db = firebase.database();

const loginSection = document.getElementById('loginSection');
const iptvSection = document.getElementById('iptvSection');
const video = document.getElementById('player');
const search = document.getElementById('search');
const channelList = document.getElementById('channelList');
const categoryList = document.getElementById('categoryList');
const nowChannel = document.getElementById('nowChannel');
const reconnecting = document.getElementById('reconnecting');

let channels = [], currentCategory = 'All', freezeCheck, lastTime = 0;
let sessionId = localStorage.getItem('sessionId') || crypto.randomUUID();
localStorage.setItem('sessionId', sessionId);

document.getElementById("loginBtn").addEventListener("click", async () => {
  const username = document.getElementById("email").value.trim();
  const password = document.getElementById("password").value.trim();
  const loginError = document.getElementById("loginError");

  if (!username || !password) return loginError.textContent = "Both fields required.";

  try {
    const userRef = db.ref('users/' + username);
    const snapshot = await userRef.once('value');
    if (!snapshot.exists()) return loginError.textContent = "User not found.";

    const data = snapshot.val();
    if (data.password !== password) return loginError.textContent = "Incorrect password.";
    const today = new Date().toISOString().split("T")[0];
    if (data.expiration < today) return loginError.textContent = "Account expired.";

    const devices = data.devices || {};
    if (!devices[sessionId] && Object.keys(devices).length >= data.device_limit) {
      return loginError.textContent = "Device limit reached.";
    }

    await db.ref(`users/${username}/devices/${sessionId}`).set(true);
    localStorage.setItem('username', username);
    loginSection.style.display = 'none';
    iptvSection.style.display = 'block';
    loadPlaylist();
    setInterval(() => {
      db.ref(`users/${username}/devices/${sessionId}`).set(true);
    }, 60000);
  } catch (e) {
    loginError.textContent = "Login error: " + e.message;
  }
});

function logout() {
  const user = localStorage.getItem("username");
  if (user) {
    db.ref('users/' + user + '/devices/' + sessionId).remove();
    localStorage.removeItem("username");
  }
  loginSection.style.display = 'flex';
  iptvSection.style.display = 'none';
}

async function loadPlaylist() {
  const username = localStorage.getItem("username");
  const snapshot = await db.ref('users/' + username).once('value');
  if (!snapshot.exists()) return;
  const playlistURL = snapshot.val().playlist;
  try {
    const res = await fetch(playlistURL);
    const text = await res.text();
    channels = parseM3U(text);
    renderCategories();
    renderChannels();
  } catch (e) {
    nowChannel.textContent = "Failed to load playlist.";
  }
}

function parseM3U(data) {
  const lines = data.split("\n");
  const items = [];
  let temp = {}, drm = {};
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (line.startsWith("#KODIPROP:inputstream.adaptive.license_key=")) {
      drm.license = line.split("=")[1];
    }
    if (line.startsWith("#EXTINF")) {
      const name = line.match(/,(.*)/)?.[1] || 'Unknown';
      const logo = line.match(/tvg-logo="(.*?)"/)?.[1] || '';
      const group = line.match(/group-title="(.*?)"/)?.[1] || 'Other';
      temp = { name, logo, group };
    }
    if (line.startsWith("http")) {
      temp.url = line;
      if (drm.license) {
        temp.drm = drm.license;
        drm = {};
      }
      items.push(temp);
      temp = {};
    }
  }
  return items;
}

function renderCategories() {
  const groups = ['All', ...new Set(channels.map(c => c.group))];
  categoryList.innerHTML = '';
  groups.forEach(group => {
    const btn = document.createElement('button');
    btn.textContent = group;
    if (group === currentCategory) btn.classList.add('active');
    btn.onclick = () => {
      currentCategory = group;
      document.querySelectorAll('.carousel button').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      renderChannels();
    };
    categoryList.appendChild(btn);
  });
}

function renderChannels() {
  const keyword = search.value.toLowerCase();
  const filtered = channels.filter(c =>
    (currentCategory === 'All' || c.group === currentCategory) &&
    c.name.toLowerCase().includes(keyword)
  );
  channelList.innerHTML = '';
  filtered.forEach(c => {
    const div = document.createElement('div');
    div.className = 'channel';
    div.innerHTML = `<img src="${c.logo}" onerror="this.src='https://via.placeholder.com/150x70?text=No+Logo'"><p>${c.name}</p>`;
    div.onclick = () => playChannel(c);
    channelList.appendChild(div);
  });
}

function playChannel(channel) {
  const isMPD = channel.url.endsWith(".mpd");
  const isHLS = channel.url.endsWith(".m3u8");

  if (isMPD && channel.drm) {
    if (shaka.Player.isBrowserSupported()) {
      const player = new shaka.Player(video);
      player.configure({
        drm: {
          servers: {
            'com.widevine.alpha': channel.drm
          }
        }
      });
      player.load(channel.url).then(() => {
        nowChannel.textContent = `Now Playing: ${channel.name}`;
      }).catch(e => {
        nowChannel.textContent = "⚠️ DRM playback failed.";
      });
    } else {
      nowChannel.textContent = "⚠️ DRM not supported on this browser.";
    }
  } else if (Hls.isSupported() && isHLS) {
    const hls = new Hls();
    hls.loadSource(channel.url);
    hls.attachMedia(video);
    hls.on(Hls.Events.MANIFEST_PARSED, () => {
      video.play();
    });
  } else {
    video.src = channel.url;
    video.play().catch(err => {
      nowChannel.textContent = "⚠️ Video playback error.";
    });
  }

  nowChannel.textContent = `Now Playing: ${channel.name}`;
}

function scrollCategory(dir) {
  categoryList.scrollBy({ left: dir * 200, behavior: 'smooth' });
}
function scrollChannel(dir) {
  channelList.scrollBy({ left: dir * 200, behavior: 'smooth' });
}

function startFreezeMonitor() {
  clearInterval(freezeCheck);
  freezeCheck = setInterval(() => {
    if (!video.paused && !video.ended) {
      if (video.currentTime === lastTime) {
        reconnecting.style.display = 'block';
        video.load(); video.play();
      } else {
        reconnecting.style.display = 'none';
      }
      lastTime = video.currentTime;
    }
  }, 5000);
}

video.addEventListener('play', startFreezeMonitor);
search.addEventListener('input', renderChannels);

// Auto-restore session
window.addEventListener('load', async () => {
  const savedUser = localStorage.getItem("username");
  if (!savedUser) return;
  const snapshot = await db.ref('users/' + savedUser).once('value');
  if (!snapshot.exists()) return;

  const data = snapshot.val();
  const today = new Date().toISOString().split("T")[0];
  const isExpired = data.expiration < today;
  const devices = data.devices || {};
  const sessionId = localStorage.getItem('sessionId');

  if (isExpired || (!devices[sessionId] && Object.keys(devices).length >= data.device_limit)) {
    localStorage.removeItem("username");
    localStorage.removeItem("sessionId");
    return;
  }

  loginSection.style.display = 'none';
  iptvSection.style.display = 'block';
  loadPlaylist();
});
</script>
</body>
  </html>
