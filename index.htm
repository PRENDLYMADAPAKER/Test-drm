<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>NZM IPTV (Shaka)</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-database.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/shaka-player/4.3.5/shaka-player.compiled.min.js"></script>
  <style>
    body, html { margin: 0; padding: 0; background: black; color: white; font-family: sans-serif; }
    #login, #iptv { display: none; }
    .centered { display: flex; justify-content: center; align-items: center; height: 100vh; flex-direction: column; }
    input, button { margin: 5px; padding: 10px; font-size: 16px; border-radius: 5px; border: none; }
    button { background: hotpink; color: white; cursor: pointer; }
    video { width: 100%; max-height: 50vh; background: black; }
    .channel { padding: 10px; border-bottom: 1px solid #444; cursor: pointer; }
    .channel:hover { background: #222; }
    #channelList { max-height: 45vh; overflow-y: auto; padding: 10px; }
  </style>
</head>
<body>

<div id="login" class="centered">
  <h2>NZM IPTV Login</h2>
  <input id="username" placeholder="Username">
  <input id="password" type="password" placeholder="Password">
  <button onclick="login()">Login</button>
  <p id="loginError" style="color:red;"></p>
</div>

<div id="iptv">
  <video id="video" controls autoplay></video>
  <div id="channelList"></div>
</div>

<script>
  const firebaseConfig = {
    apiKey: "AIzaSyDssixgarRWvLMKtUsX7HLEt8uPGmNIRak",
    authDomain: "iptv-login-3204b.firebaseapp.com",
    databaseURL: "https://iptv-login-3204b-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "iptv-login-3204b",
    storageBucket: "iptv-login-3204b.appspot.com",
    messagingSenderId: "464216999882",
    appId: "1:464216999882:web:d7e1f7d44adacd8b46b133"
  };
  firebase.initializeApp(firebaseConfig);
  const db = firebase.database();

  const loginBox = document.getElementById("login");
  const iptvBox = document.getElementById("iptv");
  const channelList = document.getElementById("channelList");
  const video = document.getElementById("video");
  const player = new shaka.Player(video);
  let sessionId = localStorage.getItem("sessionId") || crypto.randomUUID();
  localStorage.setItem("sessionId", sessionId);

  function login() {
    const username = document.getElementById("username").value.trim();
    const password = document.getElementById("password").value.trim();
    const error = document.getElementById("loginError");

    if (!username || !password) return error.textContent = "Required fields missing";

    db.ref("users/" + username).once("value").then(snap => {
      if (!snap.exists()) return error.textContent = "User not found";
      const data = snap.val();
      if (data.password !== password) return error.textContent = "Wrong password";
      if (data.expiration < new Date().toISOString().split("T")[0]) return error.textContent = "Expired";
      const devices = data.devices || {};
      if (!devices[sessionId] && Object.keys(devices).length >= data.device_limit)
        return error.textContent = "Device limit";

      db.ref(`users/${username}/devices/${sessionId}`).set(true);
      localStorage.setItem("username", username);
      loginBox.style.display = "none";
      iptvBox.style.display = "block";
      loadPlaylist(data.playlist);
    });
  }

  async function loadPlaylist(url) {
    try {
      const res = await fetch(url);
      const text = await res.text();
      const parsed = parseM3U(text);
      channelList.innerHTML = "";
      parsed.forEach(ch => {
        const div = document.createElement("div");
        div.className = "channel";
        div.innerText = ch.name;
        div.onclick = () => play(ch);
        channelList.appendChild(div);
      });
    } catch {
      alert("Failed to load playlist");
    }
  }

  function parseM3U(data) {
    const lines = data.split("\n");
    const channels = [];
    let ch = {};
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i].trim();
      if (line.startsWith("#EXTINF")) {
        ch.name = line.split(",").pop();
      } else if (line.startsWith("#KODIPROP:inputstream.adaptive.license_key=")) {
        ch.license = line.split("=")[1];
      } else if (line.startsWith("http")) {
        ch.url = line;
        channels.push({ ...ch });
        ch = {};
      }
    }
    return channels;
  }

  function play(ch) {
    if (ch.url.endsWith(".mpd") && ch.license) {
      player.configure({
        drm: {
          servers: {
            "com.widevine.alpha": ch.license
          }
        }
      });
    } else {
      player.configure({ drm: { servers: {} } });
    }
    player.load(ch.url).then(() => console.log("Playing:", ch.name));
  }

  window.onload = () => {
    const user = localStorage.getItem("username");
    if (user) {
      db.ref("users/" + user).once("value").then(snap => {
        if (!snap.exists()) return;
        const data = snap.val();
        loginBox.style.display = "none";
        iptvBox.style.display = "block";
        loadPlaylist(data.playlist);
      });
    } else {
      loginBox.style.display = "flex";
    }
  };
</script>

</body>
</html>
